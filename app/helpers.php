<?php


if (!function_exists('auth_user')) {

    /**
     * @return \Someline\Model\Foundation\User|\Someline\Models\Foundation\User
     */
    function auth_user()
    {
        return Auth::user();
    }

}

/**
 * Global helpers file with misc functions.
 */
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];
        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require  $filename;
            }
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (!function_exists('curlGetData')) {

    function curlGetData($url, $header = array()){
        $hander = curl_init();
        curl_setopt($hander, CURLOPT_URL, $url);
        curl_setopt($hander, CURLOPT_HEADER, 0);
        curl_setopt($hander, CURLOPT_HTTPHEADER, $header);
        curl_setopt($hander, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($hander, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($hander, CURLOPT_RETURNTRANSFER, true);//以数据流的方式返回数据,当为false是直接显示出来
        curl_setopt($hander, CURLOPT_TIMEOUT, 60);
        $cnt = 0;
        while($cnt < 3 && ($result = curl_exec($hander)) === false){
            $cnt++;
        }
        curl_close($hander);
        return $result;
    }
}

if (!function_exists('curlPostData')) {
    function curlPostData($url, $data, $header = array() ){
        $hander = curl_init();
        curl_setopt($hander, CURLOPT_URL, $url);
        curl_setopt($hander, CURLOPT_HEADER, 0);
        curl_setopt($hander, CURLOPT_HTTPHEADER, $header);
        curl_setopt($hander, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($hander, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($hander, CURLOPT_POST, 1);
        curl_setopt($hander, CURLOPT_POSTFIELDS, $data);
        curl_setopt($hander, CURLOPT_RETURNTRANSFER, true);//以数据流的方式返回数据,当为false是直接显示出来
        curl_setopt($hander, CURLOPT_TIMEOUT, 60);
        $cnt = 0;
        while($cnt < 3 && ($result = curl_exec($hander)) === false){
            $cnt++;
        }
        curl_close($hander);
        return $result;
    }

}


function publish($system, $exchange, $msg, $routeKey = ''){
    $msg = is_array($msg) ? json_encode($msg) : $msg;
    $mq  = new \App\RabbitMQ();
    if(!$mq->connection($system)){
        throw new Exception ('connection failed');
    }
    $mq->topicPublish($exchange, $msg, $routeKey);
}

function batchPublish($system,$exchange,$msg,$routeKey = ''){
    $mq  = new \App\RabbitMQ();
    if(!$mq->connection($system)){
        throw new Exception ('connection failed');
    }
    $mq->topicBatchPublish($exchange, $msg, $routeKey);
}

function getNow($format = "Y-m-d H:i:s"){
    return date($format);
}


